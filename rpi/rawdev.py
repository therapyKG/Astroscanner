import io, tifffile
from astropy.io import fits
import numpy as np

#input: binary buffer generated by camera api
#output: extracted RGB layers as a 3d ndarray
def process_raw(buffer):
    #open raw file and load raw pixel value into rawdata
    image = fits.open(buffer)
    rawdata = np.asarray(image[0].data, 'uint32')

    red_channel = rawdata[1::2, 0::2]

    g_0 = rawdata[0::2, 0::2]
    g_1 = rawdata[1::2, 1::2]
    green_channel = np.floor_divide((g_0 + g_1), 2)

    blue_channel = rawdata[0::2, 1::2]

    return np.asarray([red_channel, green_channel, blue_channel])

#perform 2-binning on 3d rgb array for further SNR improvements
def bin(rgb_array):

    pix_0 = np.asarray([ch[0::2, 0::2] for ch in rgb_array])
    pix_1 = np.asarray([ch[1::2, 0::2] for ch in rgb_array])
    pix_2 = np.asarray([ch[0::2, 1::2] for ch in rgb_array])
    pix_3 = np.asarray([ch[1::2, 1::2] for ch in rgb_array])

    return np.floor_divide((pix_0 + pix_1 + pix_2 + pix_3), 4).transpose(1,2,0)

def process_raw_binning(buffer):
    return bin(process_raw(buffer))

if __name__ == '__main__':
    buf = io.open("rpi/pins.fit", "rb")
    img = process_raw_binning(buf)
    print(img.shape)
    #tifffile.imwrite('rpi/pins.tif', img.astype('uint16'), photometric='rgb')